<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.Linq"#>
<#@ assembly name="System.Data.Common"#>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="System.Xml"#>
<#@ assembly name="System.Xml.Linq"#>
<#@ import namespace="System" #>
<#@ import namespace="System.CodeDom"#>
<#@ import namespace="System.CodeDom.Compiler"#>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data"#>
<#@ import namespace="System.Data.Linq"#>
<#@ import namespace="System.Data.Linq.Mapping"#>
<#@ import namespace="System.IO"#>
<#@ import namespace="System.Linq"#>
<#@ import namespace="System.Reflection"#>
<#@ import namespace="System.Text"#>
<#@ import namespace="System.Xml.Linq"#>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>
<#@ output encoding="utf-8" #>
<#    
    var connectionString = "Host=172.16.30.194;Username=postgres;Password=123456;Database=yhhis;Maximum Pool Size=20";
    var dbProvider = new PostgreSqlProvider(connectionString);
    var manager = Manager.Create(Host, GenerationEnvironment);

    var tableSchema = "public";
    var tableName = "biz_par_examination";
    var removePrefixes = new []{"biz_"};
    var separator = '_';
    var className = dbProvider.ToClassName(tableName, removePrefixes, separator);
    var tableInfo = dbProvider.GetTableInfo(tableSchema, tableName);
    var columnList = dbProvider.GetColumnList(tableSchema, tableName);
    var keyColumnInfos = columnList.FindAll(f => f.IsPrimaryKey);
    manager.StartNewFile(className + "Service.cs");
#>
using System;
using System.Threading.Tasks;
using Thea;
using Trolley;
using Trolley.PostgreSql;
using YhCore.Dtos;
using YhHis.Domain.Models;
using YhHis.Dtos;

namespace YhHis.Domain.Services;

/// <summary>
/// <#=tableInfo.Description#>
/// </summary>
public class <#=className#>Service
{
    private readonly IOrmDbFactory dbFactory;
    private readonly IPassport passport;

    public <#=className#>Service(IOrmDbFactory dbFactory, IPassport passport)
    {
        this.dbFactory = dbFactory;
        this.passport = passport;
    }
    public async Task<TheaResponse> QueryPage(QueryPageRequest request)
    {
        var repository = this.dbFactory.Create();
        var result = await repository.From<<#=className#>>()
            .Where(f => f.IsEnabled)
            .And(!string.IsNullOrEmpty(request.QueryText), f => f.<#=className#>No.Contains(request.QueryText)
                || f.<#=className#>Name.Contains(request.QueryText) || f.Mnemonic.Contains(request.QueryText))
            .Page(request.PageNumber, request.PageSize)
            .SelectFlattenTo<<#=className#>Dto>()
            .OrderBy(f => f.Sequence)
            .ToPageListAsync();
        return TheaResponse.Succeed(result);
    }
    public async Task<TheaResponse> Get(<#   
    for(int i = 0; i< keyColumnInfos.Count; i++)
    {
        var columnInfo = keyColumnInfos[i];
        var fieldName = columnInfo.ColumnName;
        var segments = fieldName.Split('_');
        fieldName = string.Join("", segments.Select(f => dbProvider.ToBigCamel(f)));
        fieldName = dbProvider.ToCamel(fieldName);
        var classMemberInfo = dbProvider.MapMember(columnInfo);
        if(i > 0)
        {
            #>, <#
        }#><#=classMemberInfo.MemberType#> <#=fieldName#><#
    }#>)
    {
        var repository = this.dbFactory.Create();
        var result = await repository.From<<#=className#>>()
            .Where(f => <#
    for(int i = 0; i< keyColumnInfos.Count; i++)
    {
        var columnInfo = keyColumnInfos[i];
        var propertyName = columnInfo.ColumnName;
        var segments = propertyName.Split('_');
        propertyName = string.Join("", segments.Select(f => dbProvider.ToBigCamel(f)));
        var fieldName = dbProvider.ToCamel(propertyName);
        var classMemberInfo = dbProvider.MapMember(columnInfo);
        if(i > 0)
        {
            #> && <#
        }#>f.<#=propertyName#> == <#=fieldName#><#
    }#>)
            .SelectFlattenTo<<#=className#>Dto>()
            .FirstAsync();
        return TheaResponse.Succeed(result);
    }
    public async Task<TheaResponse> Create(<#=className#>Dto request)
    {
<#
    foreach(var columnInfo in columnList)
    {
        var propertyName = columnInfo.ColumnName;
        var segments = propertyName.Split('_');
        propertyName = string.Join("", segments.Select(f => dbProvider.ToBigCamel(f)));
        var classMemberInfo = dbProvider.MapMember(columnInfo);
        if(classMemberInfo.MemberType != "string")
            continue;
#>
        if (string.IsNullOrEmpty(request.<#=propertyName#>))
            return TheaResponse.Fail(1, "<#=columnInfo.Description#>不能为空");
<#
    }
#>

        var repository = this.dbFactory.Create();
        var isExists = await repository.ExistsAsync<<#=className#>>(f => f.<#=className#>No == request.<#=className#>No);
        if (isExists) return TheaResponse.Fail(2, $"编码:{request.<#=className#>No}已存在");

        await repository.Create<<#=className#>>()
            .WithBy(new
            {
<#
    foreach(var columnInfo in keyColumnInfos)
    {
        var propertyName = columnInfo.ColumnName;
        var segments = propertyName.Split('_');
        propertyName = string.Join("", segments.Select(f => dbProvider.ToBigCamel(f)));#>
                <#=propertyName#> = ObjectId.NewId(),
<#
    }
    foreach(var columnInfo in columnList)
    {
        var propertyName = columnInfo.ColumnName;
        var segments = propertyName.Split('_');
        propertyName = string.Join("", segments.Select(f => dbProvider.ToBigCamel(f)));
        if(columnInfo.IsPrimaryKey)continue;#>
                request.<#=propertyName#>,
<#
    }
#>
                IsEnabled = true,
                CreatedAt = DateTime.Now,
                CreatedBy = passport.UserId ?? "1",
                UpdatedAt = DateTime.Now,
                UpdatedBy = passport.UserId ?? "1"
            })
<#
    foreach(var columnInfo in columnList)
    {
        var propertyName = columnInfo.ColumnName;
        var segments = propertyName.Split('_');
        propertyName = string.Join("", segments.Select(f => dbProvider.ToBigCamel(f)));
        if(!columnInfo.IsNullable)continue;#>
            .WithBy(!string.IsNullOrEmpty(request.<#=propertyName#>), f => f.<#=propertyName#>, request.<#=propertyName#>)
<#
    }
#>
            .ExecuteAsync();
        return TheaResponse.Success;
    }
    public async Task<TheaResponse> Modify(<#=className#>Dto request)
    {
<#
    foreach(var columnInfo in columnList)
    {
        var propertyName = columnInfo.ColumnName;
        var segments = propertyName.Split('_');
        propertyName = string.Join("", segments.Select(f => dbProvider.ToBigCamel(f)));
        var classMemberInfo = dbProvider.MapMember(columnInfo);
        if(classMemberInfo.MemberType != "string")
            continue;
#>
        if (string.IsNullOrEmpty(request.<#=propertyName#>))
            return TheaResponse.Fail(1, "<#=columnInfo.Description#>不能为空");
<#
    }
#>
        var repository = this.dbFactory.Create();
        var isExists = await repository.ExistsAsync<<#=className#>>(f => f.<#=className#>No == request.<#=className#>No && <#
    foreach(var columnInfo in keyColumnInfos)
    {
        var propertyName = columnInfo.ColumnName;
        var segments = propertyName.Split('_');
        propertyName = string.Join("", segments.Select(f => dbProvider.ToBigCamel(f)));#>f.<#=propertyName#> != request.<#=propertyName#><#
    }
#>);
        if (isExists) return TheaResponse.Fail(2, $"编码:{request.<#=className#>No}已存在");

        await repository.Update<<#=className#>>()
            .Set(new
            {
<#
    foreach(var columnInfo in columnList)
    {
        var propertyName = columnInfo.ColumnName;
        var segments = propertyName.Split('_');
        propertyName = string.Join("", segments.Select(f => dbProvider.ToBigCamel(f)));
        if(columnInfo.IsPrimaryKey)continue;#>
                request.<#=propertyName#>,
<#
    }
#>
                UpdatedAt = DateTime.Now,
                UpdatedBy = passport.UserId ?? "1"
            })
<#
    foreach(var columnInfo in columnList)
    {
        var propertyName = columnInfo.ColumnName;
        var segments = propertyName.Split('_');
        propertyName = string.Join("", segments.Select(f => dbProvider.ToBigCamel(f)));
        if(!columnInfo.IsNullable)continue;#>
            .Set(!string.IsNullOrEmpty(request.<#=propertyName#>), f => f.<#=propertyName#>, request.<#=propertyName#>)
<#
    }
#>
            .Where(f => <#
    for(int i = 0; i< keyColumnInfos.Count; i++)
    {
        var columnInfo = keyColumnInfos[i];
        var propertyName = columnInfo.ColumnName;
        var segments = propertyName.Split('_');
        propertyName = string.Join("", segments.Select(f => dbProvider.ToBigCamel(f)));
        if(i > 0)
        {
            #> && <#
        }#>f.<#=propertyName#> == request.<#=propertyName#><#
    }
#>)
            .ExecuteAsync();
        return TheaResponse.Success;
    }
    public async Task<TheaResponse> Delete(<#
    for(int i = 0; i< keyColumnInfos.Count; i++)
    {
        var columnInfo = keyColumnInfos[i];
        var propertyName = columnInfo.ColumnName;
        var segments = propertyName.Split('_');
        propertyName = string.Join("", segments.Select(f => dbProvider.ToBigCamel(f)));
        var fieldName = dbProvider.ToCamel(propertyName);
        var classMemberInfo = dbProvider.MapMember(columnInfo);
        if(i > 0)
        {
            #>, <#
        }#><#=classMemberInfo.MemberType#> <#=fieldName#><#
    }
#>)
    {
        var repository = this.dbFactory.Create();
        await repository.DeleteAsync<<#=className#>>(f => <#
    for(int i = 0; i< keyColumnInfos.Count; i++)
    {
        var columnInfo = keyColumnInfos[i];
        var propertyName = columnInfo.ColumnName;
        var segments = propertyName.Split('_');
        propertyName = string.Join("", segments.Select(f => dbProvider.ToBigCamel(f)));
        var fieldName = dbProvider.ToCamel(propertyName);
        var classMemberInfo = dbProvider.MapMember(columnInfo);
        if(i > 0)
        {
            #> && <#
        }#>f.<#=propertyName#> == <#=fieldName#><#
    }
#>);
        return TheaResponse.Success;
    }
}
<#
manager.EndBlock();
manager.Process(true);
#>
<#@ include file="$(ProjectDir)\Manager.ttinclude" once="true"#>
<#@ include file="$(ProjectDir)\DbEntitries.ttinclude" once="true"#>
<#@ include file="PostgreSqlProvider.ttinclude" once="true"#>